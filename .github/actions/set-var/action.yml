name: "Set Deployment Variables"

inputs:
  microservice:
    description: "Target microservice (react, angular, dotnet)"
    required: true

  docker_hub_username:
    description: "Docker Hub username"
    required: true

  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true

  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true    

  aws-region:
    description: "AWS Region"
    required: true    

runs:
  using: "composite"
  steps:
    - id: short-sha
      name: Generate SHORT_SHA
      shell: bash
      run: |
        SHORT_SHA=$(git rev-parse --short=7 HEAD)
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

    - name: Configure AWS Credentials
      if: ${{ inputs.aws-access-key-id && inputs.aws-secret-access-key }}
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
   
    - name: Fetch ALB DNS name
      shell: bash
      run: |
        echo "Fetching ALB DNS name from AWS..."
        ALB_DNS=$(aws elbv2 describe-load-balancers --region ${{ inputs.aws-region }} \
          --names app-alb \
          --query "LoadBalancers[0].DNSName" --output text || true)

        echo "Raw ALB_DNS fetched value: $ALB_DNS" 

        echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV
        echo "Successfully fetched and exported ALB_DNS: $ALB_DNS"

    - name: Prepare BASE_API_URL
      if: ${{ inputs.microservice == 'react' || inputs.microservice == 'angular' }}
      shell: bash
      run: |
        URL="http://${ALB_DNS}"
        echo "BASE_API_URL=$URL"
        echo "BASE_API_URL=$URL" >> $GITHUB_ENV

    - name: Set React Environment
      if: ${{ inputs.microservice == 'react' }}
      shell: bash
      run: |
        echo "PORT=80" >> $GITHUB_ENV
        echo "CONTAINER_NAME=react-app" >> $GITHUB_ENV
        echo "INSTANCE_NAME=react" >> $GITHUB_ENV
        echo "CONTEXT=frontend/react" >> $GITHUB_ENV
        echo "DOCKERFILE=frontend/react/Dockerfile" >> $GITHUB_ENV
        echo "REPO=${{ inputs.docker_hub_username }}/react" >> $GITHUB_ENV

        echo "Updating BASE_API_URL in React project"
        jq --arg url "$BASE_API_URL" '.environment.backendApiUrl = $url' frontend/react/config.json > tmp.config.json && mv tmp.config.json frontend/react/config.json
        cat frontend/react/config.json

    - name: Set Angular Environment
      if: ${{ inputs.microservice == 'angular' }}
      shell: bash
      run: |
        echo "PORT=80" >> $GITHUB_ENV
        echo "CONTAINER_NAME=angular-app" >> $GITHUB_ENV
        echo "INSTANCE_NAME=angular" >> $GITHUB_ENV
        echo "CONTEXT=frontend/angular" >> $GITHUB_ENV
        echo "DOCKERFILE=frontend/angular/Dockerfile" >> $GITHUB_ENV
        echo "REPO=${{ inputs.docker_hub_username }}/angular" >> $GITHUB_ENV

        echo "Updating BASE_API_URL in Angular project"
        jq --arg url "$BASE_API_URL" '.environment.backendApiUrl = $url' frontend/angular/config.json > tmp.config.json && mv tmp.config.json frontend/angular/config.json
        cat frontend/angular/config.json

    - name: Set Dotnet Environment
      if: ${{ inputs.microservice == 'dotnet' }}
      shell: bash
      run: |
        echo "PORT=8080" >> $GITHUB_ENV
        echo "CONTAINER_NAME=dotnet-app" >> $GITHUB_ENV
        echo "INSTANCE_NAME=dotnet" >> $GITHUB_ENV
        echo "CONTEXT=backend/ApiService" >> $GITHUB_ENV
        echo "DOCKERFILE=backend/ApiService/Dockerfile" >> $GITHUB_ENV
        echo "REPO=${{ inputs.docker_hub_username }}/dotnet" >> $GITHUB_ENV
